# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G_n9irN5jZN_qg1HuxkCR1HRpFOSoSsZ
"""

import pandas as pd
import numpy as np
df=pd.read_csv("Churn_Modelling.csv")
df.head()

"""### **DESCRIPTIVE STATISTICS**"""

df.shape

df.describe()

df.mean()

df.count()

df.isnull()

df.median()

df.mode()

df.value_counts('Geography')

df['Geography'].value_counts()

df.value_counts('Gender')

df.var()

df.skew()

df.kurtosis()

df.std()

"""### . Perform Below Visualizations 
● Univariate Analysis 
● Bi - Variate Analysis 
● Multi - Variate Analysis 

"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

plt.scatter(df.index,df['NumOfProducts'])
plt.show()

plt.scatter(df.index,df['Exited'])
plt.show()

sns.scatterplot(x=df.index,y=df['NumOfProducts'],hue=df['Exited'])

sns.stripplot(x=df['HasCrCard'],y=df['Age'])

plt.hist(df['Gender'])

df['Age'].plot(kind='density')

sns.boxplot(x='Gender',y='Age',data=df)
plt.show()

sns.boxplot(x='Geography',y='Age',data=df)
plt.show()

sns.pairplot(df,hue="NumOfProducts",height=3)
plt.show()

"""### **HANDLE MISSING VALUE**"""

df.isnull().sum()

"""we don't have missing vale but following is the procedure


*   drop the record
*   replace it with mean /median /mode value


"""

updated_df = df.dropna(axis=0)

df.shape

updated_df.shape

updated_df['Age']=updated_df['Age'].fillna(updated_df['Age'].mean())

"""### **Find and replace outliers**"""

sns.boxplot(x='Age', data=df)

#Detecting outlier using IQR
q1=df.quantile(0.25)
q3=df.quantile(0.75)
iqr=q3-q1
print(iqr)

#Removing outlier
upperlimit=df.Age.mean()+3*df.Age.std()
upperlimit

lowerlimit=df.Age.mean()-3*df.Age.std()
lowerlimit

#displaying outliers
df[(df.Age>upperlimit) | (df.Age<lowerlimit)]

#replacing outliers with upper limit and lower limit
df['Age']=np.where(df['Age']>upperlimit,upperlimit,np.where(df['Age']<lowerlimit,lowerlimit,df['Age']))

#all outliers are removed
sns.boxplot(x='Age', data=df)

import sklearn
from sklearn.datasets import load_boston 

Q1 = np.percentile(df['CreditScore'], 25, interpolation = 'midpoint') 
Q3 = np.percentile(df['CreditScore'], 75, interpolation = 'midpoint') 
IQR = Q3 - Q1 
print("Old Shape: ", df.shape) 
upper = np.where(df['CreditScore'] >= (Q3+1.5*IQR)) 
lower = np.where(df['CreditScore'] <= (Q1-1.5*IQR)) 
df.drop(upper[0], inplace = True) 
df.drop(lower[0], inplace = True) 
print("New Shape: ", df.shape) 
sns.boxplot(x='CreditScore', data=df)

"""### **Categorical variables and encoding**"""

numeric_data = df.select_dtypes(include=[np.number]) 
categorical_data = df.select_dtypes(exclude=[np.number]) 
print("Number of numerical variables: ", numeric_data.shape[1]) 
print("Number of categorical variables: ", categorical_data.shape[1])

print("Number of categorical variables: ", categorical_data.shape[1]) 
Cat_vars = list(categorical_data.columns)
Cat_vars

df['Geography'].value_counts()

CleanGeo = {"Geography":{"France": 0, "Germany": 1, "Spain":2}}

df = df.replace(CleanGeo)

df['Gender'].value_counts()

CleanGen = {"Gender": {"Male": 0, "Female": 1}}

df = df.replace(CleanGen)

df.drop(columns=['Surname'], inplace=True)

df.dtypes

"""### **Independent and dependent variable**



"""

X = df.iloc[:, :-1].values
Y = df.iloc[:, -1].values

"""### **Scale independent variables**"""

from sklearn.preprocessing import StandardScaler
object= StandardScaler()
# standardization 
scale = object.fit_transform(X) 
print(scale)

"""### **Train and Test split**"""

from sklearn.model_selection import train_test_split
# split the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.05, random_state=0)

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

